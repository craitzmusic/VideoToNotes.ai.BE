from fastapi import APIRouter, HTTPException, Depends
from fastapi.responses import StreamingResponse
from pydantic import BaseModel
from utils import verify_token, client
import io
from weasyprint import HTML
import os
import re

router = APIRouter()

class StudyGuidePDFRequest(BaseModel):
    transcript: str  # Raw transcript text
    title: str = "Study Guide"  # Optional custom title

@router.post("/generate_study_guide_pdf")
async def generate_study_guide_pdf(data: StudyGuidePDFRequest, user=Depends(verify_token)):
    """
    Receives a transcript, uses ChatGPT to structure it into topics and quizzes,
    generates a professional PDF, and returns it as a downloadable file.
    """
    # Prompt for ChatGPT to structure the content
    prompt = (
        "You are an expert educational content creator. "
        "Given the transcript below, divide the content into clear, didactic topics. "
        "For each topic, write a concise summary/explanation. "
        "After the explanation, generate 3 multiple-choice quiz questions. "
        "For each question, show the question statement (enunciation) followed by the alternatives (a), b), c), d)), all together in the Quiz Questions section. "
        "For the alternatives, use letters: a), b), c), d) instead of numbers. "
        "After the title 'Quiz Questions:', add a blank line or extra spacing before the first question. "
        "Format the output in HTML, using <h2> for topic titles, <p> for explanations, and <ul> for quizzes. "
        "At the end, include an Answer Key section listing only the question number and the correct letter (e.g., 1. b), 2. d), ...). Do NOT repeat the full question statement in the Answer Key. "
        "Do NOT include any markdown code block (no triple backticks). "
        "Transcript:\n" + data.transcript
    )

    try:
        # Call OpenAI GPT to structure the content
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a professional study guide generator."},
                {"role": "user", "content": prompt},
            ],
            max_tokens=3500,
            temperature=0.5,
        )
        structured_html = response.choices[0].message.content
        # Remove any markdown code block (```html, ```) from the response
        structured_html = re.sub(r"```[a-zA-Z]*", "", structured_html)
        structured_html = structured_html.replace("```", "")
    except Exception as e:
        print("Error calling OpenAI for study guide structuring:", e)
        raise HTTPException(status_code=500, detail="Failed to structure study guide with ChatGPT.")

    # Compose the final HTML for the PDF
    html_content = f"""
    <html>
    <head>
        <meta charset='utf-8'>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 40px; }}
            h1 {{ text-align: center; font-size: 2.2em; margin-bottom: 0.5em; }}
            h2 {{ color: #2a4d7c; margin-top: 2em; }}
            .section {{ margin-bottom: 2em; }}
            .quiz-title {{ font-weight: bold; margin-top: 1.5em; margin-bottom: 1em; display: block; }}
            .quiz {{ margin-top: 1em; margin-bottom: 2em; }}
            .footer {{ text-align: center; font-size: 0.9em; color: #888; margin-top: 3em; }}
        </style>
    </head>
    <body>
        <h1>{data.title}</h1>
        <!-- Add extra spacing after Quiz Questions: using a CSS class -->
        {structured_html.replace('Quiz Questions:', '<span class="quiz-title">Quiz Questions:</span>')}
        <div class="footer">Generated by VideoToNotes.ai</div>
    </body>
    </html>
    """
    pdf_io = io.BytesIO()
    HTML(string=html_content).write_pdf(pdf_io)
    pdf_io.seek(0)
    return StreamingResponse(pdf_io, media_type="application/pdf", headers={
        "Content-Disposition": f"attachment; filename=study_guide.pdf"
    }) 