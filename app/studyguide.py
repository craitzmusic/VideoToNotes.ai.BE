from fastapi import APIRouter, HTTPException, Depends
from fastapi.responses import StreamingResponse
from pydantic import BaseModel
from utils import verify_token, client
import io
from weasyprint import HTML
import os
import re

router = APIRouter()

class StudyGuidePDFRequest(BaseModel):
    transcript: str  # Raw transcript text
    title: str = "Study Guide"  # Optional custom title

@router.post("/generate_study_guide_pdf")
async def generate_study_guide_pdf(data: StudyGuidePDFRequest, user=Depends(verify_token)):
    """
    Receives a transcript, uses ChatGPT to structure it into topics and quizzes,
    generates a professional PDF, and returns it as a downloadable file.
    """
    # Prompt for ChatGPT to structure the content
    prompt = (
        "You are an expert educational content creator. "
        "Given the transcript below, divide the content into clear, didactic topics. "
        "For each topic, write a concise summary/explanation. "
        "After the explanation, generate exactly 3 multiple-choice quiz questions. "
        "For each question, ALWAYS show the question statement (enunciation) followed by the alternatives, using HTML. "
        "The alternatives MUST be in an ordered list <ol type='a'>, so they are always labeled a), b), c), d). NEVER use numbers, bullets, or any other format. "
        "NEVER omit the question statement. NEVER use code blocks, markdown, or any extra titles. "
        "The HTML for each question MUST look like this: "
        "<p>What is the capital of France?</p>\n<ol type='a'>\n<li>Berlin</li>\n<li>London</li>\n<li>Paris</li>\n<li>Rome</li>\n</ol> "
        "After the questions, add a section titled <h3>Answer Key</h3> and list ONLY the question number and the correct letter, like: "
        "1. c)\n2. a)\n3. d)\n. Do NOT repeat the question statement in the Answer Key. "
        "NEVER vary this format, even if the input text is different. "
        "Format the output in HTML, using <h2> for topic titles, <p> for explanations, and <ol type='a'> for alternatives. "
        "At the end, include the Answer Key as above. "
        "Do NOT include any markdown code block (no triple backticks). "
        "Transcript:\n" + data.transcript
    )

    try:
        # Call OpenAI GPT to structure the content
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a professional study guide generator."},
                {"role": "user", "content": prompt},
            ],
            max_tokens=3500,
            temperature=0.5,
        )
        structured_html = response.choices[0].message.content
        # Remove markdown code blocks
        structured_html = re.sub(r"```[a-zA-Z]*", "", structured_html)
        structured_html = structured_html.replace("```", "")
        # For√ßa <ol type='a'> nas alternativas
        structured_html = re.sub(r"<ol[^>]*>", "<ol type='a'>", structured_html)
        # Apply robust post-processing to ensure strict format consistency
        structured_html = postprocess_study_guide_html(structured_html)
    except Exception as e:
        print("Error calling OpenAI for study guide structuring:", e)
        raise HTTPException(status_code=500, detail="Failed to structure study guide with ChatGPT.")

    # Compose the final HTML for the PDF
    html_content = f"""
    <html>
    <head>
        <meta charset='utf-8'>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 40px; }}
            h1 {{ text-align: center; font-size: 2.2em; margin-bottom: 0.5em; }}
            h2 {{ color: #2a4d7c; margin-top: 2em; }}
            .section {{ margin-bottom: 2em; }}
            .quiz-title {{ font-weight: bold; margin-top: 1.5em; margin-bottom: 1em; display: block; }}
            .quiz {{ margin-top: 1em; margin-bottom: 2em; }}
            .footer {{ text-align: center; font-size: 0.9em; color: #888; margin-top: 3em; }}
        </style>
    </head>
    <body>
        <h1>{data.title}</h1>
        <!-- Add extra spacing after Quiz Questions: using a CSS class -->
        {structured_html.replace('Quiz Questions:', '<span class="quiz-title">Quiz Questions:</span>')}
        <div class="footer">Generated by VideoToNotes.ai</div>
    </body>
    </html>
    """
    pdf_io = io.BytesIO()
    HTML(string=html_content).write_pdf(pdf_io)
    pdf_io.seek(0)
    return StreamingResponse(pdf_io, media_type="application/pdf", headers={
        "Content-Disposition": f"attachment; filename=study_guide.pdf"
    })

# --- Post-processing function for study guide HTML ---
def postprocess_study_guide_html(html: str) -> str:
    """
    Post-processes the HTML generated by the language model to ensure strict format consistency for study guides.
    - Removes any markdown/code blocks.
    - Forces all alternative lists to use <ol type='a'>.
    - Converts unordered lists (<ul>) to ordered lists (<ol type='a'>) if needed.
    - Ensures the Answer Key follows the pattern '1. c)' (no question statements).
    - Removes extra titles, code blocks, or unexpected variations.
    """
    # Remove markdown code blocks (triple backticks)
    html = re.sub(r"```[a-zA-Z]*", "", html)
    html = html.replace("```", "")

    # Convert all <ol> or <ol ...> to <ol type='a'>
    html = re.sub(r"<ol[^>]*>", "<ol type='a'>", html)

    # Convert <ul> to <ol type='a'> for alternatives (if model used <ul> by mistake)
    html = re.sub(r"<ul>", "<ol type='a'>", html)
    html = re.sub(r"</ul>", "</ol>", html)

    # Remove any stray <code> or <pre> tags
    html = re.sub(r"<code>.*?</code>", "", html, flags=re.DOTALL)
    html = re.sub(r"<pre>.*?</pre>", "", html, flags=re.DOTALL)

    # Remove any markdown-style lists (e.g., '- item', '* item')
    html = re.sub(r"^\s*[-*] ", "", html, flags=re.MULTILINE)

    # Ensure the Answer Key section is present and formatted correctly
    # This regex finds the Answer Key section and normalizes its content
    def normalize_answer_key(match):
        answer_key = match.group(0)
        # Remove any question statements or extra text
        answer_key = re.sub(r"<p>.*?</p>", "", answer_key)
        # Only keep lines like '1. c)', '2. a)', etc.
        answer_key = re.sub(r"(\d+\.\s*[a-d]\))", r"\1\n", answer_key)
        # Remove any other content
        answer_key = re.sub(r"[^\d\. a-d\)\n]", "", answer_key)
        # Remove duplicate newlines
        answer_key = re.sub(r"\n+", "\n", answer_key)
        return answer_key.strip()
    html = re.sub(r"<h3>Answer Key</h3>[\s\S]*", lambda m: normalize_answer_key(m), html)

    # Remove any remaining triple backticks (just in case)
    html = html.replace("```", "")

    return html 