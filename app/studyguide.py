from fastapi import APIRouter, HTTPException, Depends
from fastapi.responses import StreamingResponse
from pydantic import BaseModel
from utils import verify_token, client
import io
from weasyprint import HTML
import os
import re

router = APIRouter()

class StudyGuidePDFRequest(BaseModel):
    transcript: str  # Raw transcript text
    title: str = "Study Guide"  # Optional custom title

@router.post("/generate_study_guide_pdf")
async def generate_study_guide_pdf(data: StudyGuidePDFRequest, user=Depends(verify_token)):
    """
    Receives a transcript, uses ChatGPT to structure it into topics and quizzes,
    generates a professional PDF, and returns it as a downloadable file.
    """
    # Prompt for ChatGPT to structure the content
    prompt = (
        "You are an expert educational content creator. "
        "Given the transcript below, divide the content into clear, didactic topics. "
        "For each topic, write a concise summary/explanation. "
        "After the explanation, generate exactly 3 multiple-choice quiz questions. "
        "For each question, ALWAYS show the question statement (enunciation) followed by the alternatives, using HTML. "
        "The alternatives MUST be in an ordered list <ol type='a'>, so they are always labeled a), b), c), d). NEVER use numbers, bullets, or any other format. "
        "NEVER omit the question statement. NEVER use code blocks, markdown, or any extra titles. "
        "The HTML for each question MUST look like this: "
        "<p>What is the capital of France?</p>\n<ol type='a'>\n<li>Berlin</li>\n<li>London</li>\n<li>Paris</li>\n<li>Rome</li>\n</ol> "
        "After the questions, add a section titled <h3>Answer Key</h3> and list ONLY the question number and the correct letter, like: "
        "1. c)\n2. a)\n3. d)\n. Do NOT repeat the question statement in the Answer Key. "
        "NEVER vary this format, even if the input text is different. "
        "Format the output in HTML, using <h2> for topic titles, <p> for explanations, and <ol type='a'> for alternatives. "
        "At the end, include the Answer Key as above. "
        "Do NOT include any markdown code block (no triple backticks). "
        "Transcript:\n" + data.transcript
    )

    try:
        # Call OpenAI GPT to structure the content
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a professional study guide generator."},
                {"role": "user", "content": prompt},
            ],
            max_tokens=3500,
            temperature=0.5,
        )
        structured_html = response.choices[0].message.content
        # Remove markdown code blocks
        structured_html = re.sub(r"```[a-zA-Z]*", "", structured_html)
        structured_html = structured_html.replace("```", "")
        # For√ßa <ol type='a'> nas alternativas
        structured_html = re.sub(r"<ol[^>]*>", "<ol type='a'>", structured_html)
    except Exception as e:
        print("Error calling OpenAI for study guide structuring:", e)
        raise HTTPException(status_code=500, detail="Failed to structure study guide with ChatGPT.")

    # Compose the final HTML for the PDF
    html_content = f"""
    <html>
    <head>
        <meta charset='utf-8'>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 40px; }}
            h1 {{ text-align: center; font-size: 2.2em; margin-bottom: 0.5em; }}
            h2 {{ color: #2a4d7c; margin-top: 2em; }}
            .section {{ margin-bottom: 2em; }}
            .quiz-title {{ font-weight: bold; margin-top: 1.5em; margin-bottom: 1em; display: block; }}
            .quiz {{ margin-top: 1em; margin-bottom: 2em; }}
            .footer {{ text-align: center; font-size: 0.9em; color: #888; margin-top: 3em; }}
        </style>
    </head>
    <body>
        <h1>{data.title}</h1>
        <!-- Add extra spacing after Quiz Questions: using a CSS class -->
        {structured_html.replace('Quiz Questions:', '<span class="quiz-title">Quiz Questions:</span>')}
        <div class="footer">Generated by VideoToNotes.ai</div>
    </body>
    </html>
    """
    pdf_io = io.BytesIO()
    HTML(string=html_content).write_pdf(pdf_io)
    pdf_io.seek(0)
    return StreamingResponse(pdf_io, media_type="application/pdf", headers={
        "Content-Disposition": f"attachment; filename=study_guide.pdf"
    }) 